// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function pchar(charToMatch) {
  var innerFn = function (str) {
    if (str === "") {
      return {
              TAG: /* Failure */1,
              _0: "No more input"
            };
    }
    var first = str[0];
    if (first === charToMatch) {
      var remaining = str.slice(1);
      return {
              TAG: /* Success */0,
              _0: [
                charToMatch,
                remaining
              ]
            };
    }
    var msg = "Expecting " + charToMatch + ". Got " + first;
    return {
            TAG: /* Failure */1,
            _0: msg
          };
  };
  return /* Parser */{
          _0: innerFn
        };
}

function run(parser, input) {
  return Curry._1(parser._0, input);
}

function andThen(parser1, parser2) {
  var innerFn = function (input) {
    var result1 = run(parser1, input);
    if (result1.TAG !== /* Success */0) {
      return {
              TAG: /* Failure */1,
              _0: result1._0
            };
    }
    var match = result1._0;
    var result2 = run(parser2, match[1]);
    if (result2.TAG !== /* Success */0) {
      return {
              TAG: /* Failure */1,
              _0: result2._0
            };
    }
    var match$1 = result2._0;
    var newValue_0 = match[0];
    var newValue_1 = match$1[0];
    var newValue = [
      newValue_0,
      newValue_1
    ];
    return {
            TAG: /* Success */0,
            _0: [
              newValue,
              match$1[1]
            ]
          };
  };
  return /* Parser */{
          _0: innerFn
        };
}

function orElse(parser1, parser2) {
  var innerFn = function (input) {
    var result1 = run(parser1, input);
    if (result1.TAG === /* Success */0) {
      return result1;
    } else {
      return run(parser2, input);
    }
  };
  return /* Parser */{
          _0: innerFn
        };
}

function choice(listOfParsers) {
  return listOfParsers.reduce(orElse, Caml_array.get(listOfParsers, 0));
}

function anyOf(listOfChars) {
  return choice(listOfChars.map(pchar));
}

exports.pchar = pchar;
exports.run = run;
exports.andThen = andThen;
exports.orElse = orElse;
exports.choice = choice;
exports.anyOf = anyOf;
/* No side effect */
